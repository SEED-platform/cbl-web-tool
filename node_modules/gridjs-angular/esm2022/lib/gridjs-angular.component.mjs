import { Component, ElementRef, EventEmitter, Input, Output, ViewEncapsulation, } from '@angular/core';
import { CommonModule } from '@angular/common';
import { Grid } from 'gridjs';
import { GRID_JS_EVENTS, GRID_JS_PROPS } from './constants';
import * as i0 from "@angular/core";
export class GridJsAngularComponent {
    constructor(elementDef) {
        this.elementDef = elementDef;
        this.initialized = false;
        this.listeners = new Map();
        // props
        this.plugins = [];
        // events
        this.beforeLoad = new EventEmitter(true);
        // renamed load event to avoid conflict with native load event
        this.gridLoad = new EventEmitter(true);
        this.cellClick = new EventEmitter(true);
        this.rowClick = new EventEmitter(true);
        this.ready = new EventEmitter(true);
        this.nativeElement = this.elementDef.nativeElement;
    }
    ngAfterViewInit() {
        this.instance = new Grid(this.getConfig(this.config ?? {}));
        this.registerEvents();
        this.instance.render(this.nativeElement);
        this.initialized = true;
    }
    ngOnChanges() {
        if (this.initialized) {
            this.updateConfig(this.config);
        }
    }
    ngOnDestroy() {
        if (this.initialized) {
            if (this.instance) {
                this.unregisterEvents();
                this.instance = undefined;
            }
        }
    }
    // public api to interact with grid instance
    getGridInstance() {
        return this.instance;
    }
    updateConfig(config = {}) {
        this.instance?.updateConfig(this.getConfig(config)).forceRender();
    }
    registerEvents() {
        for (const event of GRID_JS_EVENTS) {
            const emitter = event === 'load' ? this.gridLoad : this[event];
            if (!emitter) {
                continue;
            }
            const listener = (args) => emitter.emit(args);
            this.listeners.set(event, listener);
            if (emitter) {
                this.instance?.on(event, listener);
            }
        }
    }
    unregisterEvents() {
        for (const [event, listener] of this.listeners.entries()) {
            this.instance?.off(event, listener);
        }
    }
    getConfig(config = {}) {
        const newConfig = structuredClone(config);
        for (const [key, value] of Object.entries(this)) {
            if (GRID_JS_PROPS.includes(key)) {
                newConfig[key] = value;
            }
        }
        this.config = newConfig;
        return newConfig;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.2.1", ngImport: i0, type: GridJsAngularComponent, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.2.1", type: GridJsAngularComponent, isStandalone: true, selector: "gridjs-angular", inputs: { config: "config", plugins: "plugins", eventEmitter: "eventEmitter", plugin: "plugin", data: "data", server: "server", header: "header", from: "from", storage: "storage", pipeline: "pipeline", autoWidth: "autoWidth", width: "width", height: "height", translator: "translator", style: "style", className: "className", fixedHeader: "fixedHeader", columns: "columns", search: "search", pagination: "pagination", sort: "sort", language: "language", resizable: "resizable", processingThrottleMs: "processingThrottleMs" }, outputs: { beforeLoad: "beforeLoad", gridLoad: "gridLoad", cellClick: "cellClick", rowClick: "rowClick", ready: "ready" }, usesOnChanges: true, ngImport: i0, template: '', isInline: true, dependencies: [{ kind: "ngmodule", type: CommonModule }], encapsulation: i0.ViewEncapsulation.None }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.2.1", ngImport: i0, type: GridJsAngularComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'gridjs-angular',
                    template: '',
                    standalone: true,
                    imports: [CommonModule],
                    encapsulation: ViewEncapsulation.None,
                }]
        }], ctorParameters: () => [{ type: i0.ElementRef }], propDecorators: { config: [{
                type: Input
            }], plugins: [{
                type: Input
            }], eventEmitter: [{
                type: Input
            }], plugin: [{
                type: Input
            }], data: [{
                type: Input
            }], server: [{
                type: Input
            }], header: [{
                type: Input
            }], from: [{
                type: Input
            }], storage: [{
                type: Input
            }], pipeline: [{
                type: Input
            }], autoWidth: [{
                type: Input
            }], width: [{
                type: Input
            }], height: [{
                type: Input
            }], translator: [{
                type: Input
            }], style: [{
                type: Input
            }], className: [{
                type: Input
            }], fixedHeader: [{
                type: Input
            }], columns: [{
                type: Input
            }], search: [{
                type: Input
            }], pagination: [{
                type: Input
            }], sort: [{
                type: Input
            }], language: [{
                type: Input
            }], resizable: [{
                type: Input
            }], processingThrottleMs: [{
                type: Input
            }], beforeLoad: [{
                type: Output
            }], gridLoad: [{
                type: Output
            }], cellClick: [{
                type: Output
            }], rowClick: [{
                type: Output
            }], ready: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,