import { AfterViewInit, ElementRef, EventEmitter, OnChanges, OnDestroy } from '@angular/core';
import { Config, Grid } from 'gridjs';
import { GridEvents } from 'gridjs/dist/src/events';
import * as i0 from "@angular/core";
type GridJsAngularComponentProps = Omit<Partial<Config>, 'instance' | 'store' | 'assign' | 'update'>;
type GridEvent = keyof GridEvents;
type GridEventData<T extends GridEvent> = Parameters<GridEvents[T]>[0] extends undefined ? void : Parameters<GridEvents[T]>[0];
export declare class GridJsAngularComponent implements AfterViewInit, OnChanges, OnDestroy, GridJsAngularComponentProps {
    private elementDef;
    private nativeElement;
    private instance?;
    private initialized;
    private listeners;
    config?: Partial<Config>;
    plugins: Config['plugins'];
    eventEmitter?: Config['eventEmitter'];
    plugin?: Config['plugin'];
    data: Config['data'];
    server: Config['server'];
    header: Config['header'];
    from?: Config['from'];
    storage?: Config['storage'];
    pipeline?: Config['pipeline'];
    autoWidth?: Config['autoWidth'];
    width?: Config['width'];
    height?: Config['height'];
    translator?: Config['translator'];
    style: Config['style'];
    className: Config['className'];
    fixedHeader?: Config['fixedHeader'];
    columns?: Config['columns'];
    search?: Config['search'];
    pagination?: Config['pagination'];
    sort?: Config['sort'];
    language?: Config['language'];
    resizable?: Config['resizable'];
    processingThrottleMs?: Config['processingThrottleMs'];
    beforeLoad: EventEmitter<GridEventData<'beforeLoad'>>;
    gridLoad: EventEmitter<GridEventData<'load'>>;
    cellClick: EventEmitter<GridEventData<'cellClick'>>;
    rowClick: EventEmitter<GridEventData<'rowClick'>>;
    ready: EventEmitter<GridEventData<'ready'>>;
    constructor(elementDef: ElementRef);
    ngAfterViewInit(): void;
    ngOnChanges(): void;
    ngOnDestroy(): void;
    getGridInstance(): Grid | undefined;
    updateConfig(config?: Partial<Config>): void;
    private registerEvents;
    private unregisterEvents;
    private getConfig;
    static ɵfac: i0.ɵɵFactoryDeclaration<GridJsAngularComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<GridJsAngularComponent, "gridjs-angular", never, { "config": { "alias": "config"; "required": false; }; "plugins": { "alias": "plugins"; "required": false; }; "eventEmitter": { "alias": "eventEmitter"; "required": false; }; "plugin": { "alias": "plugin"; "required": false; }; "data": { "alias": "data"; "required": false; }; "server": { "alias": "server"; "required": false; }; "header": { "alias": "header"; "required": false; }; "from": { "alias": "from"; "required": false; }; "storage": { "alias": "storage"; "required": false; }; "pipeline": { "alias": "pipeline"; "required": false; }; "autoWidth": { "alias": "autoWidth"; "required": false; }; "width": { "alias": "width"; "required": false; }; "height": { "alias": "height"; "required": false; }; "translator": { "alias": "translator"; "required": false; }; "style": { "alias": "style"; "required": false; }; "className": { "alias": "className"; "required": false; }; "fixedHeader": { "alias": "fixedHeader"; "required": false; }; "columns": { "alias": "columns"; "required": false; }; "search": { "alias": "search"; "required": false; }; "pagination": { "alias": "pagination"; "required": false; }; "sort": { "alias": "sort"; "required": false; }; "language": { "alias": "language"; "required": false; }; "resizable": { "alias": "resizable"; "required": false; }; "processingThrottleMs": { "alias": "processingThrottleMs"; "required": false; }; }, { "beforeLoad": "beforeLoad"; "gridLoad": "gridLoad"; "cellClick": "cellClick"; "rowClick": "rowClick"; "ready": "ready"; }, never, never, true, never>;
}
export {};
